#############################################
# RMIT University Vietnam
# Course: COSC2767|COSC2805 Systems Deployment and Operations
# Semester: 2025B
# Assessment: Assignment 2
# Author: Bui Viet Anh
# ID: s3988393
# Created  date: 14/09/2025
# Last modified: 18/09/2025
# Acknowledgement: None
#############################################

AWSTemplateFormatVersion: "2010-09-09"
Description: "MongoDB EC2"
Parameters:
  VpcId:          { Type: AWS::EC2::VPC::Id, Description: "VPC ID (default VPC)" }
  SubnetId:       { Type: AWS::EC2::Subnet::Id, Description: "Subnet ID (public subnet preferred)" }
  KeyName:        { Type: AWS::EC2::KeyPair::KeyName, Default: "", Description: "Optional EC2 key pair for SSH" }
  InstanceType:   { Type: String, Default: t3.small }
  VolumeSize:     { Type: Number, Default: 20 }
  EverywhereCidr: { Type: String, Default: 0.0.0.0/0 }
Resources:
  MongoSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "MongoDB SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: !Ref EverywhereCidr }
        - { IpProtocol: tcp, FromPort: 27017, ToPort: 27017, CidrIp: !Ref EverywhereCidr }

  MongoInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: LabInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !If [HasKey, !Ref KeyName, !Ref "AWS::NoValue" ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet: [ !Ref MongoSg ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: !Ref VolumeSize, VolumeType: gp3 }
      Tags: [ { Key: Name, Value: mongo-db } ]

Conditions:
  HasKey: { "Fn::Not": [ { "Fn::Equals": [ !Ref KeyName, "" ] } ] }

Mappings:
  RegionMap:
    us-east-1: { AMI: ami-0b09ffb6d8b58ca91 }  # Amazon Linux 2023 (sample)

Outputs:
  MongoPrivateIp: { Value: !GetAtt MongoInstance.PrivateIp, Description: "Private IP of MongoDB EC2", Export: { Name: !Sub "${AWS::StackName}-MongoPrivateIp" } }
  MongoSecurityGroupId: { Value: !Ref MongoSg, Description: "Security Group ID of MongoDB EC2" }
