#############################################
# RMIT University Vietnam
# Course: COSC2767|COSC2805 Systems Deployment and Operations
# Semester: 2025B
# Assessment: Assignment 2
# Author: Bui Viet Anh
# ID: s3988393
# Created  date: 14/09/2025
# Last modified: 18/09/2025
# Acknowledgement: None
#############################################

AWSTemplateFormatVersion: "2010-09-09"
Description: "Jenkins EC2 + SG + UserData that runs ansible-pull"
Parameters:
  VpcId:          { Type: AWS::EC2::VPC::Id, Description: "VPC ID (use default VPC id if needed)" }
  SubnetId:       { Type: AWS::EC2::Subnet::Id, Description: "Public subnet id to place Jenkins in" }
  KeyName:        { Type: AWS::EC2::KeyPair::KeyName, Default: "key", Description: "Optional EC2 key pair name" }
  InstanceType:   { Type: String, Default: t3.medium }
  VolumeSize:     { Type: Number, Default: 15 }
  EverywhereCidr: { Type: String, Default: 0.0.0.0/0 }
  RepoUrl:        { Type: String, Description: "Git repo URL that contains ansible/ (public or accessible)" }
  MongoStackName: { Type: String, Default: MongoDB, Description: "Name of the MongoDB stack to import its outputs" }
  GhPatParamName: { Type: String, Default: /ci/github/pat }
  SmtpUserParam:  { Type: String, Default: /ci/smtp/user }
  SmtpPassParam:  { Type: String, Default: /ci/smtp/pass }
  MongoKeyPemParam: { Type: String, Default: /ci/keys/mongo_pem, Description: "SSM SecureString parameter holding the Mongo EC2 SSH private key (PEM)" }

Resources:
  JenkinsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Jenkins SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22,   ToPort: 22,   CidrIp: !Ref EverywhereCidr }
        - { IpProtocol: tcp, FromPort: 8080, ToPort: 8080, CidrIp: !Ref EverywhereCidr }

  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: LabInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      KeyName: !If [HasKey, !Ref KeyName, !Ref "AWS::NoValue" ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet: [ !Ref JenkinsSG ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: !Ref VolumeSize, VolumeType: gp3 }
      Tags: [ { Key: Name, Value: jenkins } ]
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
                #!/bin/bash -xe
                sudo dnf -y install git python3 awscli python3-pip
                python3 -m pip install ansible boto3 botocore

                # 0) Fetch secrets FIRST and write root-only env file
                GH_PAT="$(aws ssm get-parameter --with-decryption --name ${GhPatParamName} --query 'Parameter.Value' --output text --region ${AWS::Region})"
                SMTP_USER="$(aws ssm get-parameter --name ${SmtpUserParam} --query 'Parameter.Value' --output text --region ${AWS::Region})"
                SMTP_PASS="$(aws ssm get-parameter --with-decryption --name ${SmtpPassParam} --query 'Parameter.Value' --output text --region ${AWS::Region})"
                MONGO_PEM="$(aws ssm get-parameter --with-decryption --name ${MongoKeyPemParam} --query 'Parameter.Value' --output text --region ${AWS::Region})"

                install -o root -g root -m 0700 -d /etc/jenkins
                umask 077
                cat >/etc/jenkins/jenkins.env <<EOF
                GH_PAT=$GH_PAT
                SMTP_USER=$SMTP_USER
                SMTP_PASS=$SMTP_PASS
                MONGODB_PRIVATE_IP=${MongoPrivateIpFromExport}
                EOF
                chmod 0600 /etc/jenkins/jenkins.env

                # 1) Configure the Jenkins host
                ansible-pull \
                  -d /var/lib/jenkins/ansible-src \
                  -U ${RepoUrl} ansible/playbooks/configure-jenkins-host.yml \
                  -i localhost, \
                  -e jenkins_url=http://${JenkinsEip.PublicIp}:8080/

                # Make repo owned by jenkins for later use
                chown -R jenkins:jenkins /var/lib/jenkins/ansible-src

                # 2) Prepare Ansible collections/libs for the jenkins user
                sudo -u jenkins -H ansible-galaxy collection install amazon.aws community.docker kubernetes.core
                sudo -u jenkins -H python3 -m pip install --user boto3 botocore

                # 3) Install the Mongo SSH private key for Ansible
                install -o jenkins -g jenkins -m 0700 -d /var/lib/jenkins/.ssh
                printf '%s\n' "$MONGO_PEM" > /var/lib/jenkins/.ssh/mongo.pem
                chown jenkins:jenkins /var/lib/jenkins/.ssh/mongo.pem
                chmod 0600 /var/lib/jenkins/.ssh/mongo.pem

                cd /var/lib/jenkins/ansible-src

                # 4) Ensure Python exists on Mongo via SSH raw (works even if Python isn't installed yet)
                sudo -u jenkins -H ansible \
                  -i ansible/inventories/mongo/hosts.yml mongodb \
                  -e "mongodb_private_ip=${MongoPrivateIpFromExport}" \
                  -m raw -a 'test -e /usr/bin/python3 || sudo dnf -y install python3'

                # 5) Configure the Mongo host (Docker + container + DB user)
                sudo -u jenkins -H ansible-playbook \
                  -i ansible/inventories/mongo/hosts.yml \
                  -e "mongodb_private_ip=${MongoPrivateIpFromExport}" \
                  ansible/playbooks/configure-mongodb-host.yml
            - MongoPrivateIpFromExport:
                Fn::ImportValue: !Sub '${MongoStackName}-MongoPrivateIp'

  JenkinsEip:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  JenkinsEipAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref JenkinsInstance
      AllocationId: !GetAtt JenkinsEip.AllocationId

Conditions:
  HasKey: { "Fn::Not": [ { "Fn::Equals": [ !Ref KeyName, "" ] } ] }

Mappings:
  RegionMap:
    us-east-1: { AMI: ami-0b09ffb6d8b58ca91 }  # Amazon Linux 2023 (sample)

Outputs:
  PublicElasticIp: { Value: !GetAtt JenkinsEip.PublicIp, Description: "Elastic IP attached to Jenkins" }
  SecurityGroupId: { Value: !Ref JenkinsSG, Description: "Security Group ID of the Jenkins EC2" }
